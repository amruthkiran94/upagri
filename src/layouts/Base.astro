---
import TopNav from "@components/Nav/TopNav.astro";
import "@styles/tailwind.css";
---

<html lang="en" class="scroll-smooth">
    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width" />
        <meta name="description" content="There has been growing interest in ‘green infrastructure’ or ‘nature-based solutions’ in cities. These are actions that foster biodiversity, maintain or improve air quality, provide food and nutrition, improve health, and contribute to a better quality of life. In the Urban and Peri-urban Agriculture as Green Infrastructure (UP-AGrI) project, we examine one such solution—food grown in and around cities—and how it helps build safer, healthier, and happier cities and citizens.
        "/>
        
        <title>UPAGrI  | {Astro.props.title}</title>

        <!--Favicon generated from Seedling Emoji from Twemoji https://twemoji.twitter.com/ -->
        <link rel="icon" type="image/x-icon" href="/favicon.ico" />

        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link
            href="https://fonts.googleapis.com/css2?family=Lato:wght@400;700&family=Open+Sans:ital,wght@0,400;0,500;0,600;0,700;1,400&family=Oxygen:wght@400;700&display=swap"
            rel="stylesheet"
        />
        <link
            rel="stylesheet"
            href="https://cdn.jsdelivr.net/npm/swiper/swiper-bundle.min.css"
        />
    </head>

    <body class="bg-eggshell font-lato text-gray overflow-x-hidden">
        <TopNav />
        <main>
            <slot />
        </main>
        <script
            is:inline
            src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.3/gsap.min.js"
        ></script>
    </body>
    <script is:inline>
        window.addEventListener("DOMContentLoaded",() => {
        gsap.to(".opacity-0", {
            duration: 1,
            opacity: 1,
            ease: "power1.inOut",
            stagger: distributeByPosition({
                each: 0.2,
                from: "start", // or try an index like 5
            }),
        });})
        function distributeByPosition(vars) {
            var ease = vars.ease && gsap.parseEase(vars.ease),
                from = vars.from || 0,
                base = vars.base || 0,
                axis = vars.axis,
                ratio = { center: 0.5, end: 1, edges: 0.5 }[from] || 0,
                distances;
            return function (i, target, a) {
                var l = a.length,
                    originX,
                    originY,
                    x,
                    y,
                    d,
                    j,
                    minX,
                    maxX,
                    minY,
                    maxY,
                    positions;
                if (!distances) {
                    distances = [];
                    minX = minY = Infinity;
                    maxX = maxY = -minX;
                    positions = [];
                    for (j = 0; j < l; j++) {
                        d = a[j].getBoundingClientRect();
                        x = (d.left + d.right) / 2; //based on the center of each element
                        y = (d.top + d.bottom) / 2;
                        if (x < minX) {
                            minX = x;
                        }
                        if (x > maxX) {
                            maxX = x;
                        }
                        if (y < minY) {
                            minY = y;
                        }
                        if (y > maxY) {
                            maxY = y;
                        }
                        positions[j] = { x: x, y: y };
                    }
                    originX = isNaN(from)
                        ? minX + (maxX - minX) * ratio
                        : positions[from].x || 0;
                    originY = isNaN(from)
                        ? minY + (maxY - minY) * ratio
                        : positions[from].y || 0;
                    maxX = 0;
                    minX = Infinity;
                    for (j = 0; j < l; j++) {
                        x = positions[j].x - originX;
                        y = originY - positions[j].y;
                        distances[j] = d = !axis
                            ? Math.sqrt(x * x + y * y)
                            : Math.abs(axis === "y" ? y : x);
                        if (d > maxX) {
                            maxX = d;
                        }
                        if (d < minX) {
                            minX = d;
                        }
                    }
                    distances.max = maxX - minX;
                    distances.min = minX;
                    distances.v = l =
                        (vars.amount || vars.each * l || 0) *
                        (from === "edges" ? -1 : 1);
                    distances.b = l < 0 ? base - l : base;
                }
                l = (distances[i] - distances.min) / distances.max;
                return distances.b + (ease ? ease(l) : l) * distances.v;
            };
        }
        //END FUNCTION
    </script>
</html>
